Terminals unused in grammar

   TOKEN_ILLEGAL


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: TOKEN_KEY_PROGRAM id $@1 TOKEN_KEY_BEGIN pgm_body TOKEN_KEY_END

    3 id: TOKEN_IDENTIFIER

    4 pgm_body: decl func_declarations

    5 decl: string_decl decl
    6     | var_decl decl
    7     | empty

    8 string_decl: TOKEN_KEY_STRING id TOKEN_OP_ASSIGN str TOKEN_OP_SEMICOL

    9 str: TOKEN_STRINGLITERAL

   10 var_decl: var_type id_list TOKEN_OP_SEMICOL

   11 var_type: TOKEN_KEY_FLOAT
   12         | TOKEN_KEY_INT

   13 any_type: var_type
   14         | TOKEN_KEY_VOID

   15 $@2: %empty

   16 id_list: id $@2 id_tail

   17 id_tail: TOKEN_OP_COMMA id id_tail
   18        | empty

   19 param_decl_list: param_decl param_decl_tail
   20                | empty

   21 param_decl: var_type id

   22 param_decl_tail: TOKEN_OP_COMMA param_decl param_decl_tail
   23                | empty

   24 func_declarations: func_decl func_declarations
   25                  | empty

   26 $@3: %empty

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

   28 func_body: decl stmt_list

   29 stmt_list: stmt stmt_list
   30          | empty

   31 stmt: base_stmt
   32     | if_stmt
   33     | for_stmt

   34 base_stmt: assign_stmt
   35          | read_stmt
   36          | write_stmt
   37          | return_stmt

   38 assign_stmt: assign_expr TOKEN_OP_SEMICOL

   39 assign_expr: id TOKEN_OP_ASSIGN expr

   40 read_stmt: TOKEN_KEY_READ TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

   41 write_stmt: TOKEN_KEY_WRITE TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

   42 return_stmt: TOKEN_KEY_RETURN expr TOKEN_OP_SEMICOL

   43 expr: expr_prefix factor

   44 expr_prefix: expr_prefix factor addop
   45            | empty

   46 factor: factor_prefix postfix_expr

   47 factor_prefix: factor_prefix postfix_expr mulop
   48              | empty

   49 postfix_expr: primary
   50             | call_expr

   51 call_expr: id TOKEN_OP_LPAREN expr_list TOKEN_OP_RPAREN

   52 expr_list: expr expr_list_tail
   53          | empty

   54 expr_list_tail: TOKEN_OP_COMMA expr expr_list_tail
   55               | empty

   56 primary: TOKEN_OP_LPAREN expr TOKEN_OP_RPAREN
   57        | id
   58        | TOKEN_INTLITERAL
   59        | TOKEN_FLOATLITERAL

   60 addop: TOKEN_OP_ADD
   61      | TOKEN_OP_SUB

   62 mulop: TOKEN_OP_MUL
   63      | TOKEN_OP_DIV

   64 $@4: %empty

   65 $@5: %empty

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 decl stmt_list $@5 else_part TOKEN_KEY_FI

   67 $@6: %empty

   68 else_part: TOKEN_KEY_ELSE $@6 decl stmt_list
   69          | empty

   70 cond: expr compop expr

   71 compop: TOKEN_OP_GR
   72       | TOKEN_OP_LE
   73       | TOKEN_OP_EQ
   74       | TOKEN_OP_NEQ
   75       | TOKEN_OP_LEQ
   76       | TOKEN_OP_GEQ

   77 init_stmt: assign_expr
   78          | empty

   79 incr_stmt: assign_expr
   80          | empty

   81 $@7: %empty

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

   83 aug_stmt_list: aug_stmt aug_stmt_list
   84              | empty

   85 aug_stmt: base_stmt
   86         | aug_if_stmt
   87         | for_stmt
   88         | TOKEN_KEY_CONTINUE TOKEN_OP_SEMICOL
   89         | TOKEN_KEY_BREAK TOKEN_OP_SEMICOL

   90 $@8: %empty

   91 $@9: %empty

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 decl aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI

   93 $@10: %empty

   94 aug_else_part: TOKEN_KEY_ELSE $@10 decl aug_stmt_list
   95              | empty

   96 empty: %empty


Terminals, with rules where they appear

$end (0) 0
error (256)
TOKEN_KEY_PROGRAM (258) 2
TOKEN_KEY_BEGIN (259) 2 27
TOKEN_KEY_END (260) 2 27
TOKEN_KEY_FUNCTION (261) 27
TOKEN_KEY_READ (262) 40
TOKEN_KEY_WRITE (263) 41
TOKEN_KEY_IF (264) 66 92
TOKEN_KEY_ELSE (265) 68 94
TOKEN_KEY_FI (266) 66 92
TOKEN_KEY_FOR (267) 82
TOKEN_KEY_ROF (268) 82
TOKEN_KEY_CONTINUE (269) 88
TOKEN_KEY_BREAK (270) 89
TOKEN_KEY_RETURN (271) 42
TOKEN_KEY_INT (272) 12
TOKEN_KEY_VOID (273) 14
TOKEN_KEY_STRING (274) 8
TOKEN_KEY_FLOAT (275) 11
TOKEN_OP_ASSIGN (276) 8 39
TOKEN_OP_ADD (277) 60
TOKEN_OP_SUB (278) 61
TOKEN_OP_MUL (279) 62
TOKEN_OP_DIV (280) 63
TOKEN_OP_EQ (281) 73
TOKEN_OP_NEQ (282) 74
TOKEN_OP_LE (283) 72
TOKEN_OP_GR (284) 71
TOKEN_OP_LEQ (285) 75
TOKEN_OP_GEQ (286) 76
TOKEN_OP_LPAREN (287) 27 40 41 51 56 66 82 92
TOKEN_OP_RPAREN (288) 27 40 41 51 56 66 82 92
TOKEN_OP_SEMICOL (289) 8 10 38 40 41 42 82 88 89
TOKEN_OP_COMMA (290) 17 22 54
TOKEN_STRINGLITERAL (291) 9
TOKEN_IDENTIFIER (292) 3
TOKEN_FLOATLITERAL (293) 59
TOKEN_INTLITERAL (294) 58
TOKEN_ILLEGAL (295)


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
program (42)
    on left: 2, on right: 0
$@1 (43)
    on left: 1, on right: 2
id (44)
    on left: 3, on right: 2 8 16 17 21 27 39 51 57
pgm_body (45)
    on left: 4, on right: 2
decl (46)
    on left: 5 6 7, on right: 4 5 6 28 66 68 82 92 94
string_decl (47)
    on left: 8, on right: 5
str (48)
    on left: 9, on right: 8
var_decl (49)
    on left: 10, on right: 6
var_type (50)
    on left: 11 12, on right: 10 13 21
any_type (51)
    on left: 13 14, on right: 27
id_list (52)
    on left: 16, on right: 10 40 41
$@2 (53)
    on left: 15, on right: 16
id_tail (54)
    on left: 17 18, on right: 16 17
param_decl_list (55)
    on left: 19 20, on right: 27
param_decl (56)
    on left: 21, on right: 19 22
param_decl_tail (57)
    on left: 22 23, on right: 19 22
func_declarations (58)
    on left: 24 25, on right: 4 24
func_decl (59)
    on left: 27, on right: 24
$@3 (60)
    on left: 26, on right: 27
func_body (61)
    on left: 28, on right: 27
stmt_list (62)
    on left: 29 30, on right: 28 29 66 68
stmt (63)
    on left: 31 32 33, on right: 29
base_stmt (64)
    on left: 34 35 36 37, on right: 31 85
assign_stmt (65)
    on left: 38, on right: 34
assign_expr (66)
    on left: 39, on right: 38 77 79
read_stmt (67)
    on left: 40, on right: 35
write_stmt (68)
    on left: 41, on right: 36
return_stmt (69)
    on left: 42, on right: 37
expr (70)
    on left: 43, on right: 39 42 52 54 56 70
expr_prefix (71)
    on left: 44 45, on right: 43 44
factor (72)
    on left: 46, on right: 43 44
factor_prefix (73)
    on left: 47 48, on right: 46 47
postfix_expr (74)
    on left: 49 50, on right: 46 47
call_expr (75)
    on left: 51, on right: 50
expr_list (76)
    on left: 52 53, on right: 51
expr_list_tail (77)
    on left: 54 55, on right: 52 54
primary (78)
    on left: 56 57 58 59, on right: 49
addop (79)
    on left: 60 61, on right: 44
mulop (80)
    on left: 62 63, on right: 47
if_stmt (81)
    on left: 66, on right: 32
$@4 (82)
    on left: 64, on right: 66
$@5 (83)
    on left: 65, on right: 66
else_part (84)
    on left: 68 69, on right: 66
$@6 (85)
    on left: 67, on right: 68
cond (86)
    on left: 70, on right: 66 82 92
compop (87)
    on left: 71 72 73 74 75 76, on right: 70
init_stmt (88)
    on left: 77 78, on right: 82
incr_stmt (89)
    on left: 79 80, on right: 82
for_stmt (90)
    on left: 82, on right: 33 87
$@7 (91)
    on left: 81, on right: 82
aug_stmt_list (92)
    on left: 83 84, on right: 82 83 92 94
aug_stmt (93)
    on left: 85 86 87 88 89, on right: 83
aug_if_stmt (94)
    on left: 92, on right: 86
$@8 (95)
    on left: 90, on right: 92
$@9 (96)
    on left: 91, on right: 92
aug_else_part (97)
    on left: 94 95, on right: 92
$@10 (98)
    on left: 93, on right: 94
empty (99)
    on left: 96, on right: 7 18 20 23 25 30 45 48 53 55 69 78 80 84
    95


State 0

    0 $accept: . program $end

    TOKEN_KEY_PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    2 program: TOKEN_KEY_PROGRAM . id $@1 TOKEN_KEY_BEGIN pgm_body TOKEN_KEY_END

    TOKEN_IDENTIFIER  shift, and go to state 3

    id  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    3 id: TOKEN_IDENTIFIER .

    $default  reduce using rule 3 (id)


State 4

    2 program: TOKEN_KEY_PROGRAM id . $@1 TOKEN_KEY_BEGIN pgm_body TOKEN_KEY_END

    $default  reduce using rule 1 ($@1)

    $@1  go to state 6


State 5

    0 $accept: program $end .

    $default  accept


State 6

    2 program: TOKEN_KEY_PROGRAM id $@1 . TOKEN_KEY_BEGIN pgm_body TOKEN_KEY_END

    TOKEN_KEY_BEGIN  shift, and go to state 7


State 7

    2 program: TOKEN_KEY_PROGRAM id $@1 TOKEN_KEY_BEGIN . pgm_body TOKEN_KEY_END

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    pgm_body     go to state 11
    decl         go to state 12
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 8

   12 var_type: TOKEN_KEY_INT .

    $default  reduce using rule 12 (var_type)


State 9

    8 string_decl: TOKEN_KEY_STRING . id TOKEN_OP_ASSIGN str TOKEN_OP_SEMICOL

    TOKEN_IDENTIFIER  shift, and go to state 3

    id  go to state 17


State 10

   11 var_type: TOKEN_KEY_FLOAT .

    $default  reduce using rule 11 (var_type)


State 11

    2 program: TOKEN_KEY_PROGRAM id $@1 TOKEN_KEY_BEGIN pgm_body . TOKEN_KEY_END

    TOKEN_KEY_END  shift, and go to state 18


State 12

    4 pgm_body: decl . func_declarations

    TOKEN_KEY_FUNCTION  shift, and go to state 19

    $default  reduce using rule 96 (empty)

    func_declarations  go to state 20
    func_decl          go to state 21
    empty              go to state 22


State 13

    5 decl: string_decl . decl

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 23
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 14

    6 decl: var_decl . decl

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 24
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 15

   10 var_decl: var_type . id_list TOKEN_OP_SEMICOL

    TOKEN_IDENTIFIER  shift, and go to state 3

    id       go to state 25
    id_list  go to state 26


State 16

    7 decl: empty .

    $default  reduce using rule 7 (decl)


State 17

    8 string_decl: TOKEN_KEY_STRING id . TOKEN_OP_ASSIGN str TOKEN_OP_SEMICOL

    TOKEN_OP_ASSIGN  shift, and go to state 27


State 18

    2 program: TOKEN_KEY_PROGRAM id $@1 TOKEN_KEY_BEGIN pgm_body TOKEN_KEY_END .

    $default  reduce using rule 2 (program)


State 19

   27 func_decl: TOKEN_KEY_FUNCTION . any_type id $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

    TOKEN_KEY_INT    shift, and go to state 8
    TOKEN_KEY_VOID   shift, and go to state 28
    TOKEN_KEY_FLOAT  shift, and go to state 10

    var_type  go to state 29
    any_type  go to state 30


State 20

    4 pgm_body: decl func_declarations .

    $default  reduce using rule 4 (pgm_body)


State 21

   24 func_declarations: func_decl . func_declarations

    TOKEN_KEY_FUNCTION  shift, and go to state 19

    $default  reduce using rule 96 (empty)

    func_declarations  go to state 31
    func_decl          go to state 21
    empty              go to state 22


State 22

   25 func_declarations: empty .

    $default  reduce using rule 25 (func_declarations)


State 23

    5 decl: string_decl decl .

    $default  reduce using rule 5 (decl)


State 24

    6 decl: var_decl decl .

    $default  reduce using rule 6 (decl)


State 25

   16 id_list: id . $@2 id_tail

    $default  reduce using rule 15 ($@2)

    $@2  go to state 32


State 26

   10 var_decl: var_type id_list . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 33


State 27

    8 string_decl: TOKEN_KEY_STRING id TOKEN_OP_ASSIGN . str TOKEN_OP_SEMICOL

    TOKEN_STRINGLITERAL  shift, and go to state 34

    str  go to state 35


State 28

   14 any_type: TOKEN_KEY_VOID .

    $default  reduce using rule 14 (any_type)


State 29

   13 any_type: var_type .

    $default  reduce using rule 13 (any_type)


State 30

   27 func_decl: TOKEN_KEY_FUNCTION any_type . id $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

    TOKEN_IDENTIFIER  shift, and go to state 3

    id  go to state 36


State 31

   24 func_declarations: func_decl func_declarations .

    $default  reduce using rule 24 (func_declarations)


State 32

   16 id_list: id $@2 . id_tail

    TOKEN_OP_COMMA  shift, and go to state 37

    $default  reduce using rule 96 (empty)

    id_tail  go to state 38
    empty    go to state 39


State 33

   10 var_decl: var_type id_list TOKEN_OP_SEMICOL .

    $default  reduce using rule 10 (var_decl)


State 34

    9 str: TOKEN_STRINGLITERAL .

    $default  reduce using rule 9 (str)


State 35

    8 string_decl: TOKEN_KEY_STRING id TOKEN_OP_ASSIGN str . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 40


State 36

   27 func_decl: TOKEN_KEY_FUNCTION any_type id . $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

    $default  reduce using rule 26 ($@3)

    $@3  go to state 41


State 37

   17 id_tail: TOKEN_OP_COMMA . id id_tail

    TOKEN_IDENTIFIER  shift, and go to state 3

    id  go to state 42


State 38

   16 id_list: id $@2 id_tail .

    $default  reduce using rule 16 (id_list)


State 39

   18 id_tail: empty .

    $default  reduce using rule 18 (id_tail)


State 40

    8 string_decl: TOKEN_KEY_STRING id TOKEN_OP_ASSIGN str TOKEN_OP_SEMICOL .

    $default  reduce using rule 8 (string_decl)


State 41

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 . TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

    TOKEN_OP_LPAREN  shift, and go to state 43


State 42

   17 id_tail: TOKEN_OP_COMMA id . id_tail

    TOKEN_OP_COMMA  shift, and go to state 37

    $default  reduce using rule 96 (empty)

    id_tail  go to state 44
    empty    go to state 39


State 43

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 TOKEN_OP_LPAREN . param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

    TOKEN_KEY_INT    shift, and go to state 8
    TOKEN_KEY_FLOAT  shift, and go to state 10

    $default  reduce using rule 96 (empty)

    var_type         go to state 45
    param_decl_list  go to state 46
    param_decl       go to state 47
    empty            go to state 48


State 44

   17 id_tail: TOKEN_OP_COMMA id id_tail .

    $default  reduce using rule 17 (id_tail)


State 45

   21 param_decl: var_type . id

    TOKEN_IDENTIFIER  shift, and go to state 3

    id  go to state 49


State 46

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 TOKEN_OP_LPAREN param_decl_list . TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

    TOKEN_OP_RPAREN  shift, and go to state 50


State 47

   19 param_decl_list: param_decl . param_decl_tail

    TOKEN_OP_COMMA  shift, and go to state 51

    $default  reduce using rule 96 (empty)

    param_decl_tail  go to state 52
    empty            go to state 53


State 48

   20 param_decl_list: empty .

    $default  reduce using rule 20 (param_decl_list)


State 49

   21 param_decl: var_type id .

    $default  reduce using rule 21 (param_decl)


State 50

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN . TOKEN_KEY_BEGIN func_body TOKEN_KEY_END

    TOKEN_KEY_BEGIN  shift, and go to state 54


State 51

   22 param_decl_tail: TOKEN_OP_COMMA . param_decl param_decl_tail

    TOKEN_KEY_INT    shift, and go to state 8
    TOKEN_KEY_FLOAT  shift, and go to state 10

    var_type    go to state 45
    param_decl  go to state 55


State 52

   19 param_decl_list: param_decl param_decl_tail .

    $default  reduce using rule 19 (param_decl_list)


State 53

   23 param_decl_tail: empty .

    $default  reduce using rule 23 (param_decl_tail)


State 54

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN . func_body TOKEN_KEY_END

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 56
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    func_body    go to state 57
    empty        go to state 16


State 55

   22 param_decl_tail: TOKEN_OP_COMMA param_decl . param_decl_tail

    TOKEN_OP_COMMA  shift, and go to state 51

    $default  reduce using rule 96 (empty)

    param_decl_tail  go to state 58
    empty            go to state 53


State 56

   28 func_body: decl . stmt_list

    TOKEN_KEY_READ    shift, and go to state 59
    TOKEN_KEY_WRITE   shift, and go to state 60
    TOKEN_KEY_IF      shift, and go to state 61
    TOKEN_KEY_FOR     shift, and go to state 62
    TOKEN_KEY_RETURN  shift, and go to state 63
    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id           go to state 64
    stmt_list    go to state 65
    stmt         go to state 66
    base_stmt    go to state 67
    assign_stmt  go to state 68
    assign_expr  go to state 69
    read_stmt    go to state 70
    write_stmt   go to state 71
    return_stmt  go to state 72
    if_stmt      go to state 73
    for_stmt     go to state 74
    empty        go to state 75


State 57

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body . TOKEN_KEY_END

    TOKEN_KEY_END  shift, and go to state 76


State 58

   22 param_decl_tail: TOKEN_OP_COMMA param_decl param_decl_tail .

    $default  reduce using rule 22 (param_decl_tail)


State 59

   40 read_stmt: TOKEN_KEY_READ . TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

    TOKEN_OP_LPAREN  shift, and go to state 77


State 60

   41 write_stmt: TOKEN_KEY_WRITE . TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

    TOKEN_OP_LPAREN  shift, and go to state 78


State 61

   66 if_stmt: TOKEN_KEY_IF . TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 decl stmt_list $@5 else_part TOKEN_KEY_FI

    TOKEN_OP_LPAREN  shift, and go to state 79


State 62

   82 for_stmt: TOKEN_KEY_FOR . TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

    TOKEN_OP_LPAREN  shift, and go to state 80


State 63

   42 return_stmt: TOKEN_KEY_RETURN . expr TOKEN_OP_SEMICOL

    $default  reduce using rule 96 (empty)

    expr         go to state 81
    expr_prefix  go to state 82
    empty        go to state 83


State 64

   39 assign_expr: id . TOKEN_OP_ASSIGN expr

    TOKEN_OP_ASSIGN  shift, and go to state 84


State 65

   28 func_body: decl stmt_list .

    $default  reduce using rule 28 (func_body)


State 66

   29 stmt_list: stmt . stmt_list

    TOKEN_KEY_READ    shift, and go to state 59
    TOKEN_KEY_WRITE   shift, and go to state 60
    TOKEN_KEY_IF      shift, and go to state 61
    TOKEN_KEY_FOR     shift, and go to state 62
    TOKEN_KEY_RETURN  shift, and go to state 63
    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id           go to state 64
    stmt_list    go to state 85
    stmt         go to state 66
    base_stmt    go to state 67
    assign_stmt  go to state 68
    assign_expr  go to state 69
    read_stmt    go to state 70
    write_stmt   go to state 71
    return_stmt  go to state 72
    if_stmt      go to state 73
    for_stmt     go to state 74
    empty        go to state 75


State 67

   31 stmt: base_stmt .

    $default  reduce using rule 31 (stmt)


State 68

   34 base_stmt: assign_stmt .

    $default  reduce using rule 34 (base_stmt)


State 69

   38 assign_stmt: assign_expr . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 86


State 70

   35 base_stmt: read_stmt .

    $default  reduce using rule 35 (base_stmt)


State 71

   36 base_stmt: write_stmt .

    $default  reduce using rule 36 (base_stmt)


State 72

   37 base_stmt: return_stmt .

    $default  reduce using rule 37 (base_stmt)


State 73

   32 stmt: if_stmt .

    $default  reduce using rule 32 (stmt)


State 74

   33 stmt: for_stmt .

    $default  reduce using rule 33 (stmt)


State 75

   30 stmt_list: empty .

    $default  reduce using rule 30 (stmt_list)


State 76

   27 func_decl: TOKEN_KEY_FUNCTION any_type id $@3 TOKEN_OP_LPAREN param_decl_list TOKEN_OP_RPAREN TOKEN_KEY_BEGIN func_body TOKEN_KEY_END .

    $default  reduce using rule 27 (func_decl)


State 77

   40 read_stmt: TOKEN_KEY_READ TOKEN_OP_LPAREN . id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

    TOKEN_IDENTIFIER  shift, and go to state 3

    id       go to state 25
    id_list  go to state 87


State 78

   41 write_stmt: TOKEN_KEY_WRITE TOKEN_OP_LPAREN . id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

    TOKEN_IDENTIFIER  shift, and go to state 3

    id       go to state 25
    id_list  go to state 88


State 79

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN . cond TOKEN_OP_RPAREN $@4 decl stmt_list $@5 else_part TOKEN_KEY_FI

    $default  reduce using rule 96 (empty)

    expr         go to state 89
    expr_prefix  go to state 82
    cond         go to state 90
    empty        go to state 83


State 80

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN . init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id           go to state 64
    assign_expr  go to state 91
    init_stmt    go to state 92
    empty        go to state 93


State 81

   42 return_stmt: TOKEN_KEY_RETURN expr . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 94


State 82

   43 expr: expr_prefix . factor
   44 expr_prefix: expr_prefix . factor addop

    $default  reduce using rule 96 (empty)

    factor         go to state 95
    factor_prefix  go to state 96
    empty          go to state 97


State 83

   45 expr_prefix: empty .

    $default  reduce using rule 45 (expr_prefix)


State 84

   39 assign_expr: id TOKEN_OP_ASSIGN . expr

    $default  reduce using rule 96 (empty)

    expr         go to state 98
    expr_prefix  go to state 82
    empty        go to state 83


State 85

   29 stmt_list: stmt stmt_list .

    $default  reduce using rule 29 (stmt_list)


State 86

   38 assign_stmt: assign_expr TOKEN_OP_SEMICOL .

    $default  reduce using rule 38 (assign_stmt)


State 87

   40 read_stmt: TOKEN_KEY_READ TOKEN_OP_LPAREN id_list . TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

    TOKEN_OP_RPAREN  shift, and go to state 99


State 88

   41 write_stmt: TOKEN_KEY_WRITE TOKEN_OP_LPAREN id_list . TOKEN_OP_RPAREN TOKEN_OP_SEMICOL

    TOKEN_OP_RPAREN  shift, and go to state 100


State 89

   70 cond: expr . compop expr

    TOKEN_OP_EQ   shift, and go to state 101
    TOKEN_OP_NEQ  shift, and go to state 102
    TOKEN_OP_LE   shift, and go to state 103
    TOKEN_OP_GR   shift, and go to state 104
    TOKEN_OP_LEQ  shift, and go to state 105
    TOKEN_OP_GEQ  shift, and go to state 106

    compop  go to state 107


State 90

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond . TOKEN_OP_RPAREN $@4 decl stmt_list $@5 else_part TOKEN_KEY_FI

    TOKEN_OP_RPAREN  shift, and go to state 108


State 91

   77 init_stmt: assign_expr .

    $default  reduce using rule 77 (init_stmt)


State 92

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt . TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

    TOKEN_OP_SEMICOL  shift, and go to state 109


State 93

   78 init_stmt: empty .

    $default  reduce using rule 78 (init_stmt)


State 94

   42 return_stmt: TOKEN_KEY_RETURN expr TOKEN_OP_SEMICOL .

    $default  reduce using rule 42 (return_stmt)


State 95

   43 expr: expr_prefix factor .
   44 expr_prefix: expr_prefix factor . addop

    TOKEN_OP_ADD  shift, and go to state 110
    TOKEN_OP_SUB  shift, and go to state 111

    $default  reduce using rule 43 (expr)

    addop  go to state 112


State 96

   46 factor: factor_prefix . postfix_expr
   47 factor_prefix: factor_prefix . postfix_expr mulop

    TOKEN_OP_LPAREN     shift, and go to state 113
    TOKEN_IDENTIFIER    shift, and go to state 3
    TOKEN_FLOATLITERAL  shift, and go to state 114
    TOKEN_INTLITERAL    shift, and go to state 115

    id            go to state 116
    postfix_expr  go to state 117
    call_expr     go to state 118
    primary       go to state 119


State 97

   48 factor_prefix: empty .

    $default  reduce using rule 48 (factor_prefix)


State 98

   39 assign_expr: id TOKEN_OP_ASSIGN expr .

    $default  reduce using rule 39 (assign_expr)


State 99

   40 read_stmt: TOKEN_KEY_READ TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 120


State 100

   41 write_stmt: TOKEN_KEY_WRITE TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 121


State 101

   73 compop: TOKEN_OP_EQ .

    $default  reduce using rule 73 (compop)


State 102

   74 compop: TOKEN_OP_NEQ .

    $default  reduce using rule 74 (compop)


State 103

   72 compop: TOKEN_OP_LE .

    $default  reduce using rule 72 (compop)


State 104

   71 compop: TOKEN_OP_GR .

    $default  reduce using rule 71 (compop)


State 105

   75 compop: TOKEN_OP_LEQ .

    $default  reduce using rule 75 (compop)


State 106

   76 compop: TOKEN_OP_GEQ .

    $default  reduce using rule 76 (compop)


State 107

   70 cond: expr compop . expr

    $default  reduce using rule 96 (empty)

    expr         go to state 122
    expr_prefix  go to state 82
    empty        go to state 83


State 108

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN . $@4 decl stmt_list $@5 else_part TOKEN_KEY_FI

    $default  reduce using rule 64 ($@4)

    $@4  go to state 123


State 109

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL . cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

    $default  reduce using rule 96 (empty)

    expr         go to state 89
    expr_prefix  go to state 82
    cond         go to state 124
    empty        go to state 83


State 110

   60 addop: TOKEN_OP_ADD .

    $default  reduce using rule 60 (addop)


State 111

   61 addop: TOKEN_OP_SUB .

    $default  reduce using rule 61 (addop)


State 112

   44 expr_prefix: expr_prefix factor addop .

    $default  reduce using rule 44 (expr_prefix)


State 113

   56 primary: TOKEN_OP_LPAREN . expr TOKEN_OP_RPAREN

    $default  reduce using rule 96 (empty)

    expr         go to state 125
    expr_prefix  go to state 82
    empty        go to state 83


State 114

   59 primary: TOKEN_FLOATLITERAL .

    $default  reduce using rule 59 (primary)


State 115

   58 primary: TOKEN_INTLITERAL .

    $default  reduce using rule 58 (primary)


State 116

   51 call_expr: id . TOKEN_OP_LPAREN expr_list TOKEN_OP_RPAREN
   57 primary: id .

    TOKEN_OP_LPAREN  shift, and go to state 126

    $default  reduce using rule 57 (primary)


State 117

   46 factor: factor_prefix postfix_expr .
   47 factor_prefix: factor_prefix postfix_expr . mulop

    TOKEN_OP_MUL  shift, and go to state 127
    TOKEN_OP_DIV  shift, and go to state 128

    $default  reduce using rule 46 (factor)

    mulop  go to state 129


State 118

   50 postfix_expr: call_expr .

    $default  reduce using rule 50 (postfix_expr)


State 119

   49 postfix_expr: primary .

    $default  reduce using rule 49 (postfix_expr)


State 120

   40 read_stmt: TOKEN_KEY_READ TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL .

    $default  reduce using rule 40 (read_stmt)


State 121

   41 write_stmt: TOKEN_KEY_WRITE TOKEN_OP_LPAREN id_list TOKEN_OP_RPAREN TOKEN_OP_SEMICOL .

    $default  reduce using rule 41 (write_stmt)


State 122

   70 cond: expr compop expr .

    $default  reduce using rule 70 (cond)


State 123

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 . decl stmt_list $@5 else_part TOKEN_KEY_FI

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 130
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 124

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond . TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

    TOKEN_OP_SEMICOL  shift, and go to state 131


State 125

   56 primary: TOKEN_OP_LPAREN expr . TOKEN_OP_RPAREN

    TOKEN_OP_RPAREN  shift, and go to state 132


State 126

   51 call_expr: id TOKEN_OP_LPAREN . expr_list TOKEN_OP_RPAREN

    $default  reduce using rule 96 (empty)

    expr         go to state 133
    expr_prefix  go to state 82
    expr_list    go to state 134
    empty        go to state 135


State 127

   62 mulop: TOKEN_OP_MUL .

    $default  reduce using rule 62 (mulop)


State 128

   63 mulop: TOKEN_OP_DIV .

    $default  reduce using rule 63 (mulop)


State 129

   47 factor_prefix: factor_prefix postfix_expr mulop .

    $default  reduce using rule 47 (factor_prefix)


State 130

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 decl . stmt_list $@5 else_part TOKEN_KEY_FI

    TOKEN_KEY_READ    shift, and go to state 59
    TOKEN_KEY_WRITE   shift, and go to state 60
    TOKEN_KEY_IF      shift, and go to state 61
    TOKEN_KEY_FOR     shift, and go to state 62
    TOKEN_KEY_RETURN  shift, and go to state 63
    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id           go to state 64
    stmt_list    go to state 136
    stmt         go to state 66
    base_stmt    go to state 67
    assign_stmt  go to state 68
    assign_expr  go to state 69
    read_stmt    go to state 70
    write_stmt   go to state 71
    return_stmt  go to state 72
    if_stmt      go to state 73
    for_stmt     go to state 74
    empty        go to state 75


State 131

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL . incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id           go to state 64
    assign_expr  go to state 137
    incr_stmt    go to state 138
    empty        go to state 139


State 132

   56 primary: TOKEN_OP_LPAREN expr TOKEN_OP_RPAREN .

    $default  reduce using rule 56 (primary)


State 133

   52 expr_list: expr . expr_list_tail

    TOKEN_OP_COMMA  shift, and go to state 140

    $default  reduce using rule 96 (empty)

    expr_list_tail  go to state 141
    empty           go to state 142


State 134

   51 call_expr: id TOKEN_OP_LPAREN expr_list . TOKEN_OP_RPAREN

    TOKEN_OP_RPAREN  shift, and go to state 143


State 135

   45 expr_prefix: empty .
   53 expr_list: empty .

    TOKEN_OP_RPAREN  reduce using rule 53 (expr_list)
    $default         reduce using rule 45 (expr_prefix)


State 136

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 decl stmt_list . $@5 else_part TOKEN_KEY_FI

    $default  reduce using rule 65 ($@5)

    $@5  go to state 144


State 137

   79 incr_stmt: assign_expr .

    $default  reduce using rule 79 (incr_stmt)


State 138

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt . TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF

    TOKEN_OP_RPAREN  shift, and go to state 145


State 139

   80 incr_stmt: empty .

    $default  reduce using rule 80 (incr_stmt)


State 140

   54 expr_list_tail: TOKEN_OP_COMMA . expr expr_list_tail

    $default  reduce using rule 96 (empty)

    expr         go to state 146
    expr_prefix  go to state 82
    empty        go to state 83


State 141

   52 expr_list: expr expr_list_tail .

    $default  reduce using rule 52 (expr_list)


State 142

   55 expr_list_tail: empty .

    $default  reduce using rule 55 (expr_list_tail)


State 143

   51 call_expr: id TOKEN_OP_LPAREN expr_list TOKEN_OP_RPAREN .

    $default  reduce using rule 51 (call_expr)


State 144

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 decl stmt_list $@5 . else_part TOKEN_KEY_FI

    TOKEN_KEY_ELSE  shift, and go to state 147

    $default  reduce using rule 96 (empty)

    else_part  go to state 148
    empty      go to state 149


State 145

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN . $@7 decl aug_stmt_list TOKEN_KEY_ROF

    $default  reduce using rule 81 ($@7)

    $@7  go to state 150


State 146

   54 expr_list_tail: TOKEN_OP_COMMA expr . expr_list_tail

    TOKEN_OP_COMMA  shift, and go to state 140

    $default  reduce using rule 96 (empty)

    expr_list_tail  go to state 151
    empty           go to state 142


State 147

   68 else_part: TOKEN_KEY_ELSE . $@6 decl stmt_list

    $default  reduce using rule 67 ($@6)

    $@6  go to state 152


State 148

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 decl stmt_list $@5 else_part . TOKEN_KEY_FI

    TOKEN_KEY_FI  shift, and go to state 153


State 149

   69 else_part: empty .

    $default  reduce using rule 69 (else_part)


State 150

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 . decl aug_stmt_list TOKEN_KEY_ROF

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 154
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 151

   54 expr_list_tail: TOKEN_OP_COMMA expr expr_list_tail .

    $default  reduce using rule 54 (expr_list_tail)


State 152

   68 else_part: TOKEN_KEY_ELSE $@6 . decl stmt_list

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 155
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 153

   66 if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@4 decl stmt_list $@5 else_part TOKEN_KEY_FI .

    $default  reduce using rule 66 (if_stmt)


State 154

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl . aug_stmt_list TOKEN_KEY_ROF

    TOKEN_KEY_READ      shift, and go to state 59
    TOKEN_KEY_WRITE     shift, and go to state 60
    TOKEN_KEY_IF        shift, and go to state 156
    TOKEN_KEY_FOR       shift, and go to state 62
    TOKEN_KEY_CONTINUE  shift, and go to state 157
    TOKEN_KEY_BREAK     shift, and go to state 158
    TOKEN_KEY_RETURN    shift, and go to state 63
    TOKEN_IDENTIFIER    shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id             go to state 64
    base_stmt      go to state 159
    assign_stmt    go to state 68
    assign_expr    go to state 69
    read_stmt      go to state 70
    write_stmt     go to state 71
    return_stmt    go to state 72
    for_stmt       go to state 160
    aug_stmt_list  go to state 161
    aug_stmt       go to state 162
    aug_if_stmt    go to state 163
    empty          go to state 164


State 155

   68 else_part: TOKEN_KEY_ELSE $@6 decl . stmt_list

    TOKEN_KEY_READ    shift, and go to state 59
    TOKEN_KEY_WRITE   shift, and go to state 60
    TOKEN_KEY_IF      shift, and go to state 61
    TOKEN_KEY_FOR     shift, and go to state 62
    TOKEN_KEY_RETURN  shift, and go to state 63
    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id           go to state 64
    stmt_list    go to state 165
    stmt         go to state 66
    base_stmt    go to state 67
    assign_stmt  go to state 68
    assign_expr  go to state 69
    read_stmt    go to state 70
    write_stmt   go to state 71
    return_stmt  go to state 72
    if_stmt      go to state 73
    for_stmt     go to state 74
    empty        go to state 75


State 156

   92 aug_if_stmt: TOKEN_KEY_IF . TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 decl aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI

    TOKEN_OP_LPAREN  shift, and go to state 166


State 157

   88 aug_stmt: TOKEN_KEY_CONTINUE . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 167


State 158

   89 aug_stmt: TOKEN_KEY_BREAK . TOKEN_OP_SEMICOL

    TOKEN_OP_SEMICOL  shift, and go to state 168


State 159

   85 aug_stmt: base_stmt .

    $default  reduce using rule 85 (aug_stmt)


State 160

   87 aug_stmt: for_stmt .

    $default  reduce using rule 87 (aug_stmt)


State 161

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list . TOKEN_KEY_ROF

    TOKEN_KEY_ROF  shift, and go to state 169


State 162

   83 aug_stmt_list: aug_stmt . aug_stmt_list

    TOKEN_KEY_READ      shift, and go to state 59
    TOKEN_KEY_WRITE     shift, and go to state 60
    TOKEN_KEY_IF        shift, and go to state 156
    TOKEN_KEY_FOR       shift, and go to state 62
    TOKEN_KEY_CONTINUE  shift, and go to state 157
    TOKEN_KEY_BREAK     shift, and go to state 158
    TOKEN_KEY_RETURN    shift, and go to state 63
    TOKEN_IDENTIFIER    shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id             go to state 64
    base_stmt      go to state 159
    assign_stmt    go to state 68
    assign_expr    go to state 69
    read_stmt      go to state 70
    write_stmt     go to state 71
    return_stmt    go to state 72
    for_stmt       go to state 160
    aug_stmt_list  go to state 170
    aug_stmt       go to state 162
    aug_if_stmt    go to state 163
    empty          go to state 164


State 163

   86 aug_stmt: aug_if_stmt .

    $default  reduce using rule 86 (aug_stmt)


State 164

   84 aug_stmt_list: empty .

    $default  reduce using rule 84 (aug_stmt_list)


State 165

   68 else_part: TOKEN_KEY_ELSE $@6 decl stmt_list .

    $default  reduce using rule 68 (else_part)


State 166

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN . cond TOKEN_OP_RPAREN $@8 decl aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI

    $default  reduce using rule 96 (empty)

    expr         go to state 89
    expr_prefix  go to state 82
    cond         go to state 171
    empty        go to state 83


State 167

   88 aug_stmt: TOKEN_KEY_CONTINUE TOKEN_OP_SEMICOL .

    $default  reduce using rule 88 (aug_stmt)


State 168

   89 aug_stmt: TOKEN_KEY_BREAK TOKEN_OP_SEMICOL .

    $default  reduce using rule 89 (aug_stmt)


State 169

   82 for_stmt: TOKEN_KEY_FOR TOKEN_OP_LPAREN init_stmt TOKEN_OP_SEMICOL cond TOKEN_OP_SEMICOL incr_stmt TOKEN_OP_RPAREN $@7 decl aug_stmt_list TOKEN_KEY_ROF .

    $default  reduce using rule 82 (for_stmt)


State 170

   83 aug_stmt_list: aug_stmt aug_stmt_list .

    $default  reduce using rule 83 (aug_stmt_list)


State 171

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond . TOKEN_OP_RPAREN $@8 decl aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI

    TOKEN_OP_RPAREN  shift, and go to state 172


State 172

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN . $@8 decl aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI

    $default  reduce using rule 90 ($@8)

    $@8  go to state 173


State 173

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 . decl aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 174
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 174

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 decl . aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI

    TOKEN_KEY_READ      shift, and go to state 59
    TOKEN_KEY_WRITE     shift, and go to state 60
    TOKEN_KEY_IF        shift, and go to state 156
    TOKEN_KEY_FOR       shift, and go to state 62
    TOKEN_KEY_CONTINUE  shift, and go to state 157
    TOKEN_KEY_BREAK     shift, and go to state 158
    TOKEN_KEY_RETURN    shift, and go to state 63
    TOKEN_IDENTIFIER    shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id             go to state 64
    base_stmt      go to state 159
    assign_stmt    go to state 68
    assign_expr    go to state 69
    read_stmt      go to state 70
    write_stmt     go to state 71
    return_stmt    go to state 72
    for_stmt       go to state 160
    aug_stmt_list  go to state 175
    aug_stmt       go to state 162
    aug_if_stmt    go to state 163
    empty          go to state 164


State 175

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 decl aug_stmt_list . $@9 aug_else_part TOKEN_KEY_FI

    $default  reduce using rule 91 ($@9)

    $@9  go to state 176


State 176

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 decl aug_stmt_list $@9 . aug_else_part TOKEN_KEY_FI

    TOKEN_KEY_ELSE  shift, and go to state 177

    $default  reduce using rule 96 (empty)

    aug_else_part  go to state 178
    empty          go to state 179


State 177

   94 aug_else_part: TOKEN_KEY_ELSE . $@10 decl aug_stmt_list

    $default  reduce using rule 93 ($@10)

    $@10  go to state 180


State 178

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 decl aug_stmt_list $@9 aug_else_part . TOKEN_KEY_FI

    TOKEN_KEY_FI  shift, and go to state 181


State 179

   95 aug_else_part: empty .

    $default  reduce using rule 95 (aug_else_part)


State 180

   94 aug_else_part: TOKEN_KEY_ELSE $@10 . decl aug_stmt_list

    TOKEN_KEY_INT     shift, and go to state 8
    TOKEN_KEY_STRING  shift, and go to state 9
    TOKEN_KEY_FLOAT   shift, and go to state 10

    $default  reduce using rule 96 (empty)

    decl         go to state 182
    string_decl  go to state 13
    var_decl     go to state 14
    var_type     go to state 15
    empty        go to state 16


State 181

   92 aug_if_stmt: TOKEN_KEY_IF TOKEN_OP_LPAREN cond TOKEN_OP_RPAREN $@8 decl aug_stmt_list $@9 aug_else_part TOKEN_KEY_FI .

    $default  reduce using rule 92 (aug_if_stmt)


State 182

   94 aug_else_part: TOKEN_KEY_ELSE $@10 decl . aug_stmt_list

    TOKEN_KEY_READ      shift, and go to state 59
    TOKEN_KEY_WRITE     shift, and go to state 60
    TOKEN_KEY_IF        shift, and go to state 156
    TOKEN_KEY_FOR       shift, and go to state 62
    TOKEN_KEY_CONTINUE  shift, and go to state 157
    TOKEN_KEY_BREAK     shift, and go to state 158
    TOKEN_KEY_RETURN    shift, and go to state 63
    TOKEN_IDENTIFIER    shift, and go to state 3

    $default  reduce using rule 96 (empty)

    id             go to state 64
    base_stmt      go to state 159
    assign_stmt    go to state 68
    assign_expr    go to state 69
    read_stmt      go to state 70
    write_stmt     go to state 71
    return_stmt    go to state 72
    for_stmt       go to state 160
    aug_stmt_list  go to state 183
    aug_stmt       go to state 162
    aug_if_stmt    go to state 163
    empty          go to state 164


State 183

   94 aug_else_part: TOKEN_KEY_ELSE $@10 decl aug_stmt_list .

    $default  reduce using rule 94 (aug_else_part)
